{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","chart","chartDisplayed","React","useState","repoInput","setRepoInput","orgInput","setOrgInput","a","clear","fetch","response","json","data","console","log","stars","names","owners","i","items","length","stargazers_count","name","owner","login","pointBackgroundColors","ctx","document","getElementById","getContext","Chart","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","xAxes","ticks","fontColor","maxRotation","minRotation","yAxes","beginAtZero","title","fontSize","display","text","legend","r","Math","floor","random","g","b","push","update","url","message","alert","contribute","contributions","languageName","bytesUsed","Object","keys","values","destroy","style","className","Form","Group","Input","placeholder","onChange","e","target","value","onSubmit","Button","content","color","id","width","height","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.303556ce.chunk.js","sourcesContent":["import React from 'react';\nimport { Form } from 'semantic-ui-react';\nimport { Chart } from 'chart.js';\nimport './App.css';\n\n\n\n\n\nfunction App() {\n  var chart;\n  var chartDisplayed = false;\n  const [repoInput, setRepoInput] = React.useState('');\n  const [orgInput, setOrgInput] = React.useState('');\n\n  async function getStars()\n  {\n    if(chartDisplayed === true)\n    {\n      clear();\n    }\n    const url = \"https://api.github.com/search/repositories?q=stars:>75000\"\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(data);\n    let stars = [];\n    let names = [];\n    let owners = [];\n    for(var i = 0; i <data.items.length; i++)\n    {\n      stars[i] = data.items[i].stargazers_count;\n      names[i] = data.items[i].name;\n      owners[i] = data.items[i].owner.login\n    }\n    //for loop which combines the organisation name with the repo name.\n    for(i = 0; i <owners.length; i++)\n    {\n      owners[i] = owners[i]+'/'+names[i];\n    }\n    chartDisplayed = true;\n    var pointBackgroundColors = [];\n    var ctx = document.getElementById(\"Chart\").getContext(\"2d\");\n    chart = new Chart(ctx, { type: 'bar', data: { labels: [...owners], datasets: [{label: 'Stars', data:[...stars],backgroundColor: pointBackgroundColors , borderColor: 'black', borderWidth: 1}]},\n    options: {\n      responsive: false,\n      scales: {\n        xAxes: [{\n          ticks: {\n            fontColor: 'black',\n            maxRotation: 90,\n            minRotation: 80\n          }\n        }],\n        yAxes: [{\n          ticks: {\n            fontColor: 'black',\n            beginAtZero: true\n          }\n        }]\n      },\n      title: {\n        fontColor: '#6666ff',\n        fontSize: 36,\n        display: true,\n        text: 'Repositories with most stars. (Greater than 75,000 stars.)'\n      },\n      legend: {\n      labels: {\n        fontColor: 'black'\n      },\n    }\n      \n    }\n  \n    \n  });\n  for(i = 0; i< names.length; i++)\n  {\n    var r = Math.floor(Math.random() * 200);\n    var g = Math.floor(Math.random() * 200);\n    var b = Math.floor(Math.random() * 200);\n    pointBackgroundColors.push('rgba('+r+','+ g+','+ b+',.5)');\n    chart.update();\n  }\n  \n}\n\n  function getRepoData(e)\n  {\n    setRepoInput(e.target.value);\n    //console.log(repoInput);\n  }\n\n  function getOrgData(e)\n  {\n    setOrgInput(e.target.value);\n    //console.log(repoInput);\n  }\n\n  async function getRepos()\n  {\n    if(chartDisplayed === true)\n    {\n      clear();\n    }\n    const url = \"https://api.github.com/repos/\"+orgInput+\"/\"+repoInput+\"/contributors\";\n    const response = await fetch(url);\n    const data = await response.json();\n    if(data.message === \"Not Found\")\n    {\n      alert(\"Not a Valid Repo, try again.\")\n    }\n    else{ \n    chartDisplayed = true;\n    //console.log(data);\n    let names = [];\n    let contribute = [];\n    for(var i = 0; i < data.length; i++)\n    {\n      names[i] = data[i].login;\n      contribute[i] = data[i].contributions\n    }\n    var pointBackgroundColors = [];\n    var ctx = document.getElementById(\"Chart\").getContext(\"2d\");\n    chart = new Chart(ctx, {type: 'doughnut', \n        data: {\n            labels: [...names],\n            datasets: [{\n              label: 'Contributors.',\n              data: [...contribute],\n              backgroundColor: pointBackgroundColors,\n            }\n          ]\n        },\n        options: {\n        title: {\n          fontSize: 30,\n          fontColor: '#6666ff',\n          display: true,\n          text: 'Doughnut chart which lists all contributors of the searched repo and how much of a contribution they have made.'\n        }\n      }\n\n      });\n\n      for(i = 0; i< names.length; i++)\n      {\n        var r = Math.floor(Math.random() * 200);\n        var g = Math.floor(Math.random() * 200);\n        var b = Math.floor(Math.random() * 200);\n        pointBackgroundColors.push('rgba('+r+','+ g+','+ b+',.5)');\n        chart.update();\n      }\n    }\n  }\n\n  async function getLanguagesRepo()\n  {\n    if(chartDisplayed === true)\n    {\n      clear();\n    }\n    const url =  \"https://api.github.com/repos/\"+orgInput+\"/\"+repoInput+\"/languages\";\n    const response = await fetch(url);\n    const data = await response.json();\n    if(data.message === \"Not Found\")\n    {\n      alert(\"Not a Valid Repo, try again.\")\n    }\n    else {\n      chartDisplayed = true;\n      let languageName = [];\n      let bytesUsed = [];\n      var pointBackgroundColors = [];\n      for(var i = 0; i < Object.keys(data).length; i++)\n      {\n        languageName[i] = Object.keys(data)[i];\n        bytesUsed[i] = Object.values(data)[i];\n      }\n      var ctx = document.getElementById(\"Chart\").getContext('2d');\n      chart = new Chart(ctx, {type: 'pie',\n          data:{\n            labels: [...languageName],\n            datasets: [{\n              label: 'Languages Used.',\n              data: [...bytesUsed],\n              backgroundColor: pointBackgroundColors,\n            }]\n          },\n          options:{\n          title: {\n            fontColor: '#6666ff',\n            fontSize: 36,\n            display: true,\n            text: 'Piechart showing what programming languages are used in the repo.'\n          }\n        }\n        });\n        for(i = 0; i< languageName.length; i++)\n        {\n        var r = Math.floor(Math.random() * 200);\n        var g = Math.floor(Math.random() * 200);\n        var b = Math.floor(Math.random() * 200);\n        pointBackgroundColors.push('rgba('+r+','+ g+','+ b+',.5)');\n        chart.update();\n       }\n    }\n  }\n\n\n\n    //Verify(repoInput, data);\n  /*function Verify(repoInput, data)\n  {\n    let matched = -1;\n    if(data.total_count===0)\n    {\n      matched =-2;\n    }\n    //console.log(data.items.length);\n    for(var i = 0; i<data.items.length; i++)\n    {\n      if(repoInput === data.items[i].name) {\n        matched = i;\n      }\n    }\n    if(matched === -1) {\n      results = data.items[0];\n    }\n    else {\n      results = data.items[matched];\n      console.log(results);\n    }\n  }\n  */\n  \n  function clear()\n  {\n    if(chartDisplayed === true)\n    {\n      chart.destroy();\n      chartDisplayed = false;\n    }\n    else{\n      chartDisplayed = false;\n    }\n  }\n\n\n\n  return (\n      \n      <div style={{backgroundColor: 'powderblue' }}>\n\n        <div className= 'navbar'>Github API Visualisations</div>\n        <div className= 'search'>\n          <Form>\n            <Form.Group>\n              <Form.Input placeholder= 'Organisation...' name='name' onChange={getOrgData}/>\n              <div className= 'slash'>/</div>\n              <Form.Input placeholder= 'Repository...' name='name' onChange={getRepoData}/>\n              <Form onSubmit={getRepos}>\n              <Form.Button content= 'Search for Contributions' color = 'teal' />\n              </Form>\n              <Form onSubmit={getLanguagesRepo}>\n              <Form.Button content= 'Search what languages are used.' color= 'teal' />\n              </Form>\n              <Form onSubmit={getStars} >\n                <Form.Button content= 'Top Stars' color= 'teal'   />\n              </Form>\n              <Form onSubmit={clear}>\n                <Form.Button content= 'Clear Page' color= 'red'/>\n              </Form>\n            </Form.Group>\n          </Form>\n\n        </div>\n        <div className = 'chart'>\n        <canvas id=\"Chart\" width=\"1000\" height=\"550\"></canvas>\n        </div>\n        <script>\n        </script>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}